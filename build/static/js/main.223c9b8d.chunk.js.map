{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kWAOeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,iCC4DEC,MAxDf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,EACjBC,mBAAS,IADQ,mBACtCC,EADsC,KAC9BC,EAD8B,OAETF,mBAAS,IAFA,mBAEtCG,EAFsC,KAE1BC,EAF0B,KAoC7C,OAhCAC,qBAAU,WAAM,4CACf,4BAAAC,EAAA,sEACuBb,EAAMc,IAAIT,GADjC,cACOU,EADP,OAECN,EAAUM,EAAQC,KAAKC,SAFxB,kBAGQF,GAHR,4CADe,uBAAC,WAAD,wBAMfG,KACE,CAACb,IA0BH,yBAAKc,UAAU,OACd,4BAAKf,GAEL,yBAAKe,UAAU,gBACbX,EAAOY,KAAI,SAACC,GAAD,OACX,yBACCC,IAAKD,EAAME,GACXC,QAAS,kBAtBM,SAACH,GAChBX,EACHC,EAAc,IAEdc,KAAkB,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOK,OAAQ,IAC3BC,MAAK,SAAAC,GAEL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDrB,EAAckB,EAAUf,IAAI,SAE5BmB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAYZG,CAAYhB,IAC3BF,UAAS,sBAAiBb,GAAc,oBACxCgC,IAAG,UAhDQ,wCAgDR,OAAgBhC,EAAae,EAAMkB,YAAclB,EAAMmB,eAC1DC,IAAKpB,EAAMK,WAIbhB,GAAc,kBAAC,IAAD,CAASgC,QAAShC,EAAYiC,KAtClC,CACZC,OAAQ,MACRC,MAAO,OACPC,WAAY,CAEXC,SAAU,QC1BPC,EAAU,mCAaDC,EAXE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,MC+CPU,MApDf,WAAmB,IAgBAC,EAAKC,EAhBN,EACSrD,mBAAS,IADlB,mBACVc,EADU,KACHwC,EADG,KAmBjB,OAhBAjD,qBAAU,WAAM,4CACf,4BAAAC,EAAA,sEACuBb,EAAMc,IAAImC,EAASE,uBAD1C,cACOpC,EADP,OAEC8C,EACC9C,EAAQC,KAAKC,QACZ6C,KAAKC,MAAMD,KAAKE,SAAWjD,EAAQC,KAAKC,QAAQgD,OAAS,KAJ5D,kBAOQlD,GAPR,4CADe,uBAAC,WAAD,wBAUfG,KACE,IAMF,4BAAQC,UAAU,SACjB+C,MAAO,CACNC,eAAgB,QAChBC,gBAAgB,wDAAD,cACyB/C,QADzB,IACyBA,OADzB,EACyBA,EAAOmB,cADhC,gBAGf6B,mBAAoB,kBAGrB,yBAAKlD,UAAU,oBAEd,wBAAIA,UAAU,kBACP,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOK,QAAvB,OAA+BL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOiD,gBAGxC,yBAAKnD,UAAU,mBACd,4BAAQA,UAAU,kBAAlB,QACA,4BAAQA,UAAU,kBAAlB,YAGD,wBAAIA,UAAU,wBAxBCwC,EAyBL,OAACtC,QAAD,IAACA,OAAD,EAACA,EAAOkD,SAzBEX,EAyBQ,KAxBpB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIa,OAAO,EAAGZ,EAAI,GAAK,MAAQD,KA8BvD,yBAAKxC,UAAU,yB,MClBHsD,MA/Bf,WAAgB,IAAD,EACgBlE,oBAAS,GADzB,mBACJmE,EADI,KACEC,EADF,KAcX,OAXA/D,qBAAU,WAMN,OALAgE,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBH,GAAW,GACRA,GAAW,MAEf,WACHC,OAAOG,oBAAoB,aAEhC,IAGC,yBAAK5D,UAAS,cAASuD,GAAQ,eAC5B,yBACAvD,UAAU,YACVmB,IAAI,uEACJG,IAAI,iBAGH,yBACAtB,UAAU,cACVmB,IAAI,gFACJG,IAAI,kBCJDuC,MAjBf,WACC,OACC,yBAAK7D,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKf,MAAM,oBAAoBC,SAAU4C,EAASE,sBAAuB7C,YAAU,IACnF,kBAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU4C,EAASC,gBAC7C,kBAAC,EAAD,CAAK9C,MAAM,YAAYC,SAAU4C,EAASG,gBAC1C,kBAAC,EAAD,CAAKhD,MAAM,gBAAgBC,SAAU4C,EAASI,oBAC9C,kBAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU4C,EAASK,oBAC9C,kBAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU4C,EAASM,oBAC9C,kBAAC,EAAD,CAAKnD,MAAM,iBAAiBC,SAAU4C,EAASO,qBAC/C,kBAAC,EAAD,CAAKpD,MAAM,gBAAgBC,SAAU4C,EAASQ,uBCP7BwB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEd7D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6D,c","file":"static/js/main.223c9b8d.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/** base url to make requests to the movie database */\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = 'https://image.tmdb.org/t/p/original/';\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\tconst [movies, setMovies] = useState([]);\n\tconst [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\tsetMovies(request.data.results);\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t}, [fetchUrl]);\n\n\tconst opts = {\n\t\theight: \"390\",\n\t\twidth: \"100%\",\n\t\tplayerVars: {\n\t\t\t// https://developers.google.com/youtube/player_parameters\n\t\t\tautoplay: 1,\n\t\t},\n\t};\n\n\tconst handleClick = (movie) => {\n\t\tif (trailerUrl) {\n\t\t\tsetTrailerUrl('');\n\t\t} else {\n\t\t\tmovieTrailer(movie?.name || \"\")\n\t\t\t.then(url => {\n\t\t\t\t// https://www.youtube.com/watch?v=XtMThy8QKqU\n\t\t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\n\t\t\t\tsetTrailerUrl(urlParams.get(\"v\"));\n\t\t\t})\n\t\t\t.catch((error) => console.log(error));\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"row\">\n\t\t\t<h2>{title}</h2>\n\n\t\t\t<div className=\"row__posters\">\n\t\t\t\t{movies.map((movie) => (\n\t\t\t\t\t<img\n\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\tonClick={() => handleClick(movie)}\n\t\t\t\t\t\tclassName={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n\t\t\t\t\t\tsrc={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n\t\t\t\t\t\talt={movie.name}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t{trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n\t\t</div>\n\t);\n}\n\nexport default Row;\n","const API_KEY = \"685c5acf0ae0e099bf825553836ae103\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en=US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css';\n\nfunction Banner() {\n\tconst [movie, setMovie] = useState([]);\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst request = await axios.get(requests.fetchNetflixOriginals);\n\t\t\tsetMovie(\n\t\t\t\trequest.data.results[\n\t\t\t\t\tMath.floor(Math.random() * request.data.results.length - 1)\n\t\t\t\t]\n\t\t\t);\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tfunction truncate(str, n) {\n\t\treturn str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n\t}\n\treturn (\n\t\t<header className=\"banner\"\n\t\t\tstyle={{\n\t\t\t\tbackgroundSize: \"cover\",\n\t\t\t\tbackgroundImage: `url(\n\t\t\t\t\t\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n\t\t\t\t)`,\n\t\t\t\tbackgroundPosition: \"center center\",\n\t\t}}\n\t\t> \n\t\t\t<div className=\"banner__contents\">\n\t\t\t\t{/* title */}\n\t\t\t\t<h1 className=\"banner__title\">\n\t\t\t\t\t{movie?.title || movie?.name || movie?.original_name}\n\t\t\t\t</h1>\n\n\t\t\t\t<div className=\"banner__buttons\">\n\t\t\t\t\t<button className=\"banner__button\">Play</button>\n\t\t\t\t\t<button className=\"banner__button\">My List</button>\n\t\t\t\t</div>\n\n\t\t\t\t<h1 className=\"banner__description\">\n\t\t\t\t\t{truncate(movie?.overview, 150)}\n\t\t\t\t</h1>\n\t\t\t\t{/* div > 2 buttons */}\n\t\t\t\t{/* description */}\n\t\t\t</div>\n\n\t\t\t<div className=\"banner--fadeBottom\" />\n\t\t</header>\n\t);\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n           <img\n           className=\"nav__logo\"\n           src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n           alt=\"Netflix Logo\"\n           />\n\n            <img\n            className=\"nav__avatar\"\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n            alt=\"Avatar Logo\"\n            />\n        </div>\n    )\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Nav />\n\t\t\t<Banner />\n\t\t\t<Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n\t\t\t<Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n\t\t\t<Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n\t\t\t<Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n\t\t\t<Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n\t\t\t<Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n\t\t\t<Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n\t\t\t<Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}